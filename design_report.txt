CS564 PP3 Design Report

As the time needed and overall difficulty of this project was underestimated by our team, we were unable 
to fully implement our entire design. We decided to focus on the functions that seemed obtainable to 
complete before the deadline. The functions that we were able to implement are the constructor, the 
deconstructor, startScan, and endScan. For insertEntry, scanNext, and getNextEntry, which would be used to 
complete the startScan function, we included a description in this report of our plans for these functions 
had we alloted enough time, along with details about the functions that we were able to implement.  

Functions implemented:

	Constructor

		The constructor serves multiple purposes. First of all the name of the index file is computed
		using the code given in the write up. Next, we use the index file name to check if this index file
		already exists, and if it does not, we create a new file with that index file name. Also, various
		class members are initialized, some depending on whether a new file has been created. For example,
		if the file exists, we set the header page number to match the existing, otherwise, those pages are 
		allocated using the buffer manager. After this step, we make sure to unpin the header and root pages
		in the buffer manager, as they are no longer needed in memory. Last, we make use of the FileScan 
		class to make entries into our index, using the code from main.cpp lines 113-128, had we implemented 
		the insertEntry function.

	Deconstructor
	
		In the deconstructor, the scanExecuting variable is set to false, index file is written by calling
		the buffer manager flush function, and last the BlobFile object is deleted.

	startScan

		In this function, we first make sure that a scan is not already being executed, and if that is the
		case, the endScan function is called to end that scan. Next, we make sure that the proper operators
		are given for lowOpParm and highOpParm. If anything besides GT or GTE is given for lowOpParm, or
		LT or LTE for the highOpParm, a BadOpCodesException is thrown. We then perform a check to make sure
		that the lowValParm is less than the highValParm, if not, a BadScanrangeException is thrown. Now,
		if all of the parameters given are valid, the scanExecuting member is set to true, the lowValInt,
		highValInt, lowOp, and highOp class members are set to the respective parameters. Last, the helper
		function getNextEntry is called to retrieve the next entry to be scanned.

	endScan
		
		To end a scan, we first check if the scanExecuting class member is set to true, and if not, a
		ScanNotInitialzedException is thrown. Next, we unpin the page that the class member currentPageNum
		is pointing to, as it is not needed in memory anymore. Last, the scanExecuting class member is set
		to false.

Functions not implemented:
	
	getNextEntry
		
		In order to complete the startScan function, we needed to implement a helper function that would
		retrieve the next entry to be scanned. According to our design, this function would be recursive 
		which would take a PageId as a parameter and return an integer which represents the index of the
		next entry. This function would iterate through each child of the current node, checking if the
		current entry maintains the bounds defined by lowOp and highOp, if those bounds are violated, that
		index is returned. Throughout this process, we would have made sure to unpin each page that was
		read by the buffer manager after it was no longer needed.

		Maybe add more here	

	insertEntry
		To correctly complete the insertEntry function, we will need a few helper methods that split internal
		nodes and leaf nodes in order to insert. If there are overflows in a leaf node, split the node into two nodes. 
		The first node will contain ceil((n-1)/2) values and the second will contain the remaining values. The smallest
		key from the second node will then go to the parent node. If there are overflows in an internal node, split that 
		node into two nodes. The first node will contain ceil(n/2)-1 values. Make the smallest key as parent. And then
		second node will contain the remaining keys. Because the indexed attribute is a single data type (integer), thats
		all we have to compare as we propagate through the branches. Make sure that when the tree is created, the the header
		page for the tree is storing metadata. 

	
	scanNext
		First check if the scanExecuting is set to true and if not throw a ScanNotInitializedException.
		We will loop through the entries until we have found one that matches the scan. The way we iterate
		is by moving on to the right sibling of the page if it has been completely scanned. We will make sure
		to unpin the pages from the buffer that are no longer of use. We will know that we have scanned all of
		the required records if any page has a right sibling value that indicates the end of the pages. Also,
		if we reach values that are outside of the highOp and lowOp interval then we will know we are done
		scanning. Once we have a valid entry we will exit the loop and assign the outRid parameter with the 
		appropriate value.


